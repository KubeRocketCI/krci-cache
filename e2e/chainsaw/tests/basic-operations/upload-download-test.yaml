apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: upload-download-test
  labels:
    test-suite: basic-operations
    test-type: file-operations
spec:
  description: Test krci-cache file upload and download functionality
  timeouts:
    apply: 30s
    assert: 30s
    cleanup: 60s
  steps:
  # Step 1: Deploy krci-cache application
  - name: deploy-krci-cache
    description: Deploy krci-cache with base configuration
    try:
    - apply:
        file: ../../manifests/base/kustomization.yaml
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: krci-cache
            namespace: krci-cache-e2e
          status:
            readyReplicas: 1

  # Step 2: Wait for deployment to be ready and healthy
  - name: wait-for-ready
    description: Wait for krci-cache to be ready and healthy
    try:
    - assert:
        resource:
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: krci-cache-e2e
          spec:
            containers:
            - name: krci-cache
          status:
            conditions:
            - type: Ready
              status: "True"
    - script:
        content: |
          kubectl run health-check-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -f -s http://krci-cache.krci-cache-e2e.svc.cluster.local/health
        check:
          ($error==null): true

  # Step 3: Create test file and upload it
  - name: test-file-upload
    description: Test file upload functionality
    try:
    - script:
        content: |
          # Create a test pod with test file
          kubectl run upload-test-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            sh -c '
              echo "This is a test file for krci-cache e2e testing" > /tmp/test-file.txt && \
              curl -f -X POST \
                -u cache-user:test-password \
                -F "file=@/tmp/test-file.txt" \
                -w "%{http_code}" \
                http://krci-cache.krci-cache-e2e.svc.cluster.local/upload/test-artifact/test-file.txt
            '
        check:
          ($stdout | contains("200") or $stdout | contains("201")): true

  # Step 4: Verify file was uploaded by checking existence
  - name: verify-upload
    description: Verify file was successfully uploaded
    try:
    - script:
        content: |
          kubectl run verify-upload-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -f -s \
              -u cache-user:test-password \
              -w "%{http_code}" \
              -o /dev/null \
              http://krci-cache.krci-cache-e2e.svc.cluster.local/download/test-artifact/test-file.txt
        check:
          ($stdout=="200"): true

  # Step 5: Download and verify file content
  - name: test-file-download
    description: Test file download and content verification
    try:
    - script:
        content: |
          kubectl run download-test-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -f -s \
              -u cache-user:test-password \
              http://krci-cache.krci-cache-e2e.svc.cluster.local/download/test-artifact/test-file.txt
        check:
          ($stdout | contains("This is a test file for krci-cache e2e testing")): true

  # Step 6: Test file listing functionality (if available)
  - name: test-file-listing
    description: Test file listing functionality
    try:
    - script:
        content: |
          kubectl run list-test-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -f -s \
              -u cache-user:test-password \
              -w "%{http_code}" \
              -o /dev/null \
              http://krci-cache.krci-cache-e2e.svc.cluster.local/list/test-artifact
        check:
          # Either 200 (if endpoint exists) or 404 (if not implemented yet)
          ($stdout=="200" or $stdout=="404"): true

  # Step 7: Test unauthorized access (should fail)
  - name: test-unauthorized-access
    description: Verify unauthorized access is properly rejected
    try:
    - script:
        content: |
          kubectl run unauth-test-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -s \
              -w "%{http_code}" \
              -o /dev/null \
              http://krci-cache.krci-cache-e2e.svc.cluster.local/download/test-artifact/test-file.txt
        check:
          ($stdout=="401"): true

  # Step 8: Cleanup test files
  - name: cleanup-test-files
    description: Clean up test files (if delete endpoint exists)
    try:
    - script:
        content: |
          kubectl run cleanup-test-pod \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i \
            --namespace=krci-cache-e2e \
            --timeout=60s \
            --command -- \
            curl -s \
              -u cache-user:test-password \
              -X DELETE \
              -w "%{http_code}" \
              -o /dev/null \
              http://krci-cache.krci-cache-e2e.svc.cluster.local/delete/test-artifact/test-file.txt
        check:
          # Either 200/204 (if endpoint exists) or 404/405 (if not implemented)
          ($stdout=="200" or $stdout=="204" or $stdout=="404" or $stdout=="405"): true
